//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 36 images.
  struct image {
    /// Image `22红`.
    static let 红 = Rswift.ImageResource(bundle: R.hostingBundle, name: "22红")
    /// Image `44绿`.
    static let 绿 = Rswift.ImageResource(bundle: R.hostingBundle, name: "44绿")
    /// Image `back_arrow`.
    static let back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_arrow")
    /// Image `duanlian1`.
    static let duanlian1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "duanlian1")
    /// Image `duanlian`.
    static let duanlian = Rswift.ImageResource(bundle: R.hostingBundle, name: "duanlian")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `mima`.
    static let mima = Rswift.ImageResource(bundle: R.hostingBundle, name: "mima")
    /// Image `shouji`.
    static let shouji = Rswift.ImageResource(bundle: R.hostingBundle, name: "shouji")
    /// Image `wo1`.
    static let wo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wo1")
    /// Image `wo`.
    static let wo = Rswift.ImageResource(bundle: R.hostingBundle, name: "wo")
    /// Image `xiangmu1`.
    static let xiangmu1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "xiangmu1")
    /// Image `xiangmu`.
    static let xiangmu = Rswift.ImageResource(bundle: R.hostingBundle, name: "xiangmu")
    /// Image `中间1`.
    static let 中间1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "中间1")
    /// Image `中间`.
    static let 中间 = Rswift.ImageResource(bundle: R.hostingBundle, name: "中间")
    /// Image `减1`.
    static let 减1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "减1")
    /// Image `减`.
    static let 减 = Rswift.ImageResource(bundle: R.hostingBundle, name: "减")
    /// Image `前面`.
    static let 前面 = Rswift.ImageResource(bundle: R.hostingBundle, name: "前面")
    /// Image `加1`.
    static let 加1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "加1")
    /// Image `加`.
    static let 加 = Rswift.ImageResource(bundle: R.hostingBundle, name: "加")
    /// Image `后面`.
    static let 后面 = Rswift.ImageResource(bundle: R.hostingBundle, name: "后面")
    /// Image `存档`.
    static let 存档 = Rswift.ImageResource(bundle: R.hostingBundle, name: "存档")
    /// Image `底图`.
    static let 底图 = Rswift.ImageResource(bundle: R.hostingBundle, name: "底图")
    /// Image `强弱度`.
    static let 强弱度 = Rswift.ImageResource(bundle: R.hostingBundle, name: "强弱度")
    /// Image `播放`.
    static let 播放 = Rswift.ImageResource(bundle: R.hostingBundle, name: "播放")
    /// Image `播放点击`.
    static let 播放点击 = Rswift.ImageResource(bundle: R.hostingBundle, name: "播放点击")
    /// Image `暂停`.
    static let 暂停 = Rswift.ImageResource(bundle: R.hostingBundle, name: "暂停")
    /// Image `暂停点击`.
    static let 暂停点击 = Rswift.ImageResource(bundle: R.hostingBundle, name: "暂停点击")
    /// Image `椭圆1拷贝2`.
    static let 椭圆1拷贝2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "椭圆1拷贝2")
    /// Image `版本`.
    static let 版本 = Rswift.ImageResource(bundle: R.hostingBundle, name: "版本")
    /// Image `矩形1拷贝`.
    static let 矩形1拷贝 = Rswift.ImageResource(bundle: R.hostingBundle, name: "矩形1拷贝")
    /// Image `背景色`.
    static let 背景色 = Rswift.ImageResource(bundle: R.hostingBundle, name: "背景色")
    /// Image `蓝牙`.
    static let 蓝牙 = Rswift.ImageResource(bundle: R.hostingBundle, name: "蓝牙")
    /// Image `蓝牙未连接`.
    static let 蓝牙未连接 = Rswift.ImageResource(bundle: R.hostingBundle, name: "蓝牙未连接")
    /// Image `设置`.
    static let 设置 = Rswift.ImageResource(bundle: R.hostingBundle, name: "设置")
    /// Image `身前身后底色`.
    static let 身前身后底色 = Rswift.ImageResource(bundle: R.hostingBundle, name: "身前身后底色")
    /// Image `退出`.
    static let 退出 = Rswift.ImageResource(bundle: R.hostingBundle, name: "退出")
    
    /// `UIImage(named: "22红", bundle: ..., traitCollection: ...)`
    static func 红(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.红, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "44绿", bundle: ..., traitCollection: ...)`
    static func 绿(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.绿, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back_arrow", bundle: ..., traitCollection: ...)`
    static func back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "duanlian", bundle: ..., traitCollection: ...)`
    static func duanlian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.duanlian, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "duanlian1", bundle: ..., traitCollection: ...)`
    static func duanlian1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.duanlian1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mima", bundle: ..., traitCollection: ...)`
    static func mima(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mima, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shouji", bundle: ..., traitCollection: ...)`
    static func shouji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shouji, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wo", bundle: ..., traitCollection: ...)`
    static func wo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wo1", bundle: ..., traitCollection: ...)`
    static func wo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wo1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xiangmu", bundle: ..., traitCollection: ...)`
    static func xiangmu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xiangmu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "xiangmu1", bundle: ..., traitCollection: ...)`
    static func xiangmu1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xiangmu1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "中间", bundle: ..., traitCollection: ...)`
    static func 中间(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.中间, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "中间1", bundle: ..., traitCollection: ...)`
    static func 中间1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.中间1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "减", bundle: ..., traitCollection: ...)`
    static func 减(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.减, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "减1", bundle: ..., traitCollection: ...)`
    static func 减1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.减1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "前面", bundle: ..., traitCollection: ...)`
    static func 前面(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.前面, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "加", bundle: ..., traitCollection: ...)`
    static func 加(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.加, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "加1", bundle: ..., traitCollection: ...)`
    static func 加1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.加1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "后面", bundle: ..., traitCollection: ...)`
    static func 后面(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.后面, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "存档", bundle: ..., traitCollection: ...)`
    static func 存档(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.存档, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "底图", bundle: ..., traitCollection: ...)`
    static func 底图(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.底图, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "强弱度", bundle: ..., traitCollection: ...)`
    static func 强弱度(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.强弱度, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "播放", bundle: ..., traitCollection: ...)`
    static func 播放(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.播放, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "播放点击", bundle: ..., traitCollection: ...)`
    static func 播放点击(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.播放点击, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "暂停", bundle: ..., traitCollection: ...)`
    static func 暂停(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.暂停, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "暂停点击", bundle: ..., traitCollection: ...)`
    static func 暂停点击(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.暂停点击, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "椭圆1拷贝2", bundle: ..., traitCollection: ...)`
    static func 椭圆1拷贝2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.椭圆1拷贝2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "版本", bundle: ..., traitCollection: ...)`
    static func 版本(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.版本, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "矩形1拷贝", bundle: ..., traitCollection: ...)`
    static func 矩形1拷贝(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.矩形1拷贝, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "背景色", bundle: ..., traitCollection: ...)`
    static func 背景色(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.背景色, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "蓝牙", bundle: ..., traitCollection: ...)`
    static func 蓝牙(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.蓝牙, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "蓝牙未连接", bundle: ..., traitCollection: ...)`
    static func 蓝牙未连接(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.蓝牙未连接, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "设置", bundle: ..., traitCollection: ...)`
    static func 设置(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.设置, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "身前身后底色", bundle: ..., traitCollection: ...)`
    static func 身前身后底色(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.身前身后底色, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "退出", bundle: ..., traitCollection: ...)`
    static func 退出(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.退出, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "Cell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `FFMineViewController`, and contains static references to 1 segues.
    struct ffMineViewController {
      /// Segue identifier `toBLEScan`.
      static let toBLEScan: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FFMineViewController, FFBLEScanViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toBLEScan")
      
      /// Optionally returns a typed version of segue `toBLEScan`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toBLEScan(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FFMineViewController, FFBLEScanViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.ffMineViewController.toBLEScan, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `BLE`.
    static let blE = _R.storyboard.blE()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Sport`.
    static let sport = _R.storyboard.sport()
    /// Storyboard `Tab`.
    static let tab = _R.storyboard.tab()
    /// Storyboard `User`.
    static let user = _R.storyboard.user()
    
    /// `UIStoryboard(name: "BLE", bundle: ...)`
    static func blE(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.blE)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Sport", bundle: ...)`
    static func sport(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sport)
    }
    
    /// `UIStoryboard(name: "Tab", bundle: ...)`
    static func tab(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tab)
    }
    
    /// `UIStoryboard(name: "User", bundle: ...)`
    static func user(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.user)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans
      static let canceL = Rswift.StringResource(key: "CANCEL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您确定退出吗？
      /// 
      /// Locales: zh-Hans
      static let mine_exit_alert_message = Rswift.StringResource(key: "mine_exit_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确认
      /// 
      /// Locales: zh-Hans
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请在设置里，打开蓝牙
      /// 
      /// Locales: zh-Hans
      static let mine_ble_scan_need_ble_open_tip = Rswift.StringResource(key: "mine_ble_scan_need_ble_open_tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans
      static func canceL(_: Void = ()) -> String {
        return NSLocalizedString("CANCEL", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您确定退出吗？
      /// 
      /// Locales: zh-Hans
      static func mine_exit_alert_message(_: Void = ()) -> String {
        return NSLocalizedString("mine_exit_alert_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确认
      /// 
      /// Locales: zh-Hans
      static func oK(_: Void = ()) -> String {
        return NSLocalizedString("OK", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请在设置里，打开蓝牙
      /// 
      /// Locales: zh-Hans
      static func mine_ble_scan_need_ble_open_tip(_: Void = ()) -> String {
        return NSLocalizedString("mine_ble_scan_need_ble_open_tip", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try blE.validate()
      try launchScreen.validate()
      try sport.validate()
      try tab.validate()
      try user.validate()
    }
    
    struct blE: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = FFBLEScanViewController
      
      let bundle = R.hostingBundle
      let ffbleScanViewController = StoryboardViewControllerResource<FFBLEScanViewController>(identifier: "FFBLEScanViewController")
      let name = "BLE"
      
      func ffbleScanViewController(_: Void = ()) -> FFBLEScanViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ffbleScanViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "背景色", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '背景色' is used in storyboard 'BLE', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.blE().ffbleScanViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ffbleScanViewController' could not be loaded from storyboard 'BLE' as 'FFBLEScanViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct sport: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Sport"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct tab: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = FFTabBarController
      
      let bundle = R.hostingBundle
      let ffExerciseViewController = StoryboardViewControllerResource<FFExerciseViewController>(identifier: "FFExerciseViewController")
      let ffItemsViewController = StoryboardViewControllerResource<FFItemsViewController>(identifier: "FFItemsViewController")
      let ffMineViewController = StoryboardViewControllerResource<FFMineViewController>(identifier: "FFMineViewController")
      let ffTabBarController = StoryboardViewControllerResource<FFTabBarController>(identifier: "FFTabBarController")
      let name = "Tab"
      
      func ffExerciseViewController(_: Void = ()) -> FFExerciseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ffExerciseViewController)
      }
      
      func ffItemsViewController(_: Void = ()) -> FFItemsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ffItemsViewController)
      }
      
      func ffMineViewController(_: Void = ()) -> FFMineViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ffMineViewController)
      }
      
      func ffTabBarController(_: Void = ()) -> FFTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ffTabBarController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "duanlian", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'duanlian' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "duanlian1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'duanlian1' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wo' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wo1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wo1' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xiangmu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xiangmu' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "xiangmu1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'xiangmu1' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "底图", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '底图' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "强弱度", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '强弱度' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "播放", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '播放' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "播放点击", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '播放点击' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "背景色", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '背景色' is used in storyboard 'Tab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "蓝牙未连接", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '蓝牙未连接' is used in storyboard 'Tab', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.tab().ffExerciseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ffExerciseViewController' could not be loaded from storyboard 'Tab' as 'FFExerciseViewController'.") }
        if _R.storyboard.tab().ffItemsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ffItemsViewController' could not be loaded from storyboard 'Tab' as 'FFItemsViewController'.") }
        if _R.storyboard.tab().ffMineViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ffMineViewController' could not be loaded from storyboard 'Tab' as 'FFMineViewController'.") }
        if _R.storyboard.tab().ffTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ffTabBarController' could not be loaded from storyboard 'Tab' as 'FFTabBarController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct user: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let name = "User"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'User', but couldn't be loaded.") }
        if UIKit.UIImage(named: "身前身后底色", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '身前身后底色' is used in storyboard 'User', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
